
Code "D-Pad In 2D Sections" by "DevDede" and "Placed5th"
//

    #lib "Player"
    #lib "BlackboardStatus"
    #lib "HMM"
	#lib "INI"
    #lib "XInput"


    #load "System.Numerics.dll"

    using System.Collections.Generic;
    using System.Numerics;

    static bool IsConfigInitialised = false;
	static int DPadType = 0;
    static bool UseLeftTiltLeftJoystick = false; // set to true to enable left joystick
    static bool UseRightTiltLeftJoystick = false; // set to true to enable right joystick
    static bool UseDownTiltLeftJoystick = false; // set to true to enable south joystick

    [Flags]
    public enum Buttons : ushort
    {
        DPAD_UP        = 0x0001,
        DPAD_DOWN      = 0x0002,
        DPAD_LEFT      = 0x0004,
        DPAD_RIGHT     = 0x0008,
        START          = 0x0010,
        BACK           = 0x0020,
        LEFT_THUMB     = 0x0040,
        RIGHT_THUMB    = 0x0080,
        LEFT_SHOULDER  = 0x0100,
        RIGHT_SHOULDER = 0x0200,
        A              = 0x1000,
        B              = 0x2000,
        X              = 0x4000,
        Y              = 0x8000
    }

    public struct XINPUT_GAMEPAD
    {
        public short sThumbLX; // Left thumbstick X-axis (-32768 to 32767)
        public short sThumbLY; // Left thumbstick Y-axis (-32768 to 32767)
        public short sThumbRX; // Right thumbstick X-axis (-32768 to 32767)
        public short sThumbRY; // Right thumbstick Y-axis (-32768 to 32767)
        public byte bLeftTrigger; // Left trigger (0-255)
        public byte bRightTrigger; // Right trigger (0-255)
    }

    Vector2 v = Vector2.Zero;

    #define PRINT(in_str) Console.WriteLine(in_str)
//
{

    

    var state = Player.State.GetCurrentStateID<Sonic.StateID>();

    XINPUT_GAMEPAD gamepadState = new XINPUT_GAMEPAD();

    if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;


    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("Frontiers 2D D-Pad Support");

        if (modsQuery.Count == 1)
            {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            DPadType = INI.Parse<int>(ini["Main"]["DPadType"], DPadType );
            }

        IsConfigInitialised = true;
    }

    if(UseLeftTiltLeftJoystick == true) 
    {
        
        //gamepadState.sThumbLX = -32767; //
         v = new Vector2(gamepadState.sThumbLX / -32767.0f);
    }

    if(UseRightTiltLeftJoystick == true) 
    {
        
        //gamepadState.sThumbLX = 32767; //
        v = new Vector2(gamepadState.sThumbLX / 32767.0f);
    }

    if(UseDownTiltLeftJoystick == true) 
    {

    }

    if (DPadType == 1)
    {
       if (XInput.IsButtonDown(XInput.Buttons.DPAD_UP))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_RIGHT))
       {
            UseRightTiltLeftJoystick = true;
            PRINT("DPAD RIGHT BUTTON DOWN"); // Writes 1 to the console.
       } else {
            UseRightTiltLeftJoystick = false;
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_LEFT))
       {
            UseLeftTiltLeftJoystick = true;
            PRINT("DPAD LEFT BUTTON DOWN");
       } else {
            UseLeftTiltLeftJoystick = false;
       }
    }
    
    
    //Classic Spindash Support DPAD
    if (DPadType == 2)
    {
         if (XInput.IsButtonDown(XInput.Buttons.DPAD_UP))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_RIGHT))
       {
            UseRightTiltLeftJoystick = true;
       } else {
            UseRightTiltLeftJoystick = false;
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_LEFT))
       {
            UseLeftTiltLeftJoystick = true;
       } else {
            UseLeftTiltLeftJoystick = false;
       }
    }

    
    
}


