Code "D-Pad In 2D Sections" by "DevDede" and "Placed5th"
//

    #lib "Player"
    #lib "BlackboardStatus"
    #lib "HMM"
	#lib "INI"
    #lib "XInput"


    #load "System.Numerics.dll"

    using System.Collections.Generic;
    using System.Numerics;
    

    static bool IsConfigInitialised = false;
	static int DPadType = 0;
    static bool SquatPressed = false;
    static bool WasSet = false;
    static bool WasReleased = false;


    static List<Sonic.StateID> stompState = new() {
        Sonic.StateID.StateSquat
    };


    #define PRINT(in_str) Console.WriteLine(in_str)
//
{
    if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN) && Player.Status.IsGrounded())
       {
        Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSquat);
        Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateStandRoot, Sonic.StateID.StateSquat);   
        SquatPressed = true;
        WasSet = false;
        WasReleased = true;
       } else {
        if(WasReleased)
        {
                Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateStandRoot, Sonic.StateID.StateStandRoot); 
                WasReleased = false;
        }
        
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_RIGHT))
       {
            //PRINT("DPAD RIGHT BUTTON DOWN"); // Writes 1 to the console.
            
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_LEFT))
       {
            //PRINT("DPAD LEFT BUTTON DOWN");
            
            Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateRun);
       } 
       
    if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    

    var state = Player.State.GetCurrentStateID<Sonic.StateID>();

   

    if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;


    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("Frontiers 2D D-Pad Support");

        if (modsQuery.Count == 1)
            {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            DPadType = INI.Parse<int>(ini["Main"]["DPadType"], DPadType );
            }

        IsConfigInitialised = true;
    }


    if (DPadType == 1)
    {
       if (XInput.IsButtonDown(XInput.Buttons.DPAD_UP))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN) && Player.Status.IsGrounded())
       {
           
           Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSquat);
       } else {
            Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSquat, Sonic.StateID.StateStandRoot);
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_RIGHT))
       {
            PRINT("DPAD RIGHT BUTTON DOWN"); // Writes 1 to the console.
            
            
       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_LEFT))
       {
            PRINT("DPAD LEFT BUTTON DOWN");
            
       } 
    }
    
    
    //Classic Spindash Support DPAD
    if (DPadType == 2)
    {
         if (XInput.IsButtonDown(XInput.Buttons.DPAD_UP))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_DOWN))
       {

       }

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_RIGHT))
       {
           
       } 

       if (XInput.IsButtonDown(XInput.Buttons.DPAD_LEFT))
       {
            
       } 
    }
}


Code "Print State ID" in "Debug" by "Hyper" does
/*
Prints the current player state ID to the debug console every frame.

This code requires the debug console to be enabled in Hedge Mod Manager to have any effect.
*/
//
    #lib "Player"
//
{
    var stateIdNo = (int)Player.State.GetCurrentStateID<Sonic.StateID>();

    switch (Player.GetPlayerType())
    {
        case Player.PlayerType.Sonic:
            Console.WriteLine($"[State ID] Sonic: {Player.State.GetCurrentStateID<Sonic.StateID>()} ({stateIdNo})");
            break;

        case Player.PlayerType.Amy:
            Console.WriteLine($"[State ID] Amy: {Player.State.GetCurrentStateID<Amy.StateID>()} ({stateIdNo})");
            break;

        case Player.PlayerType.Knuckles:
            Console.WriteLine($"[State ID] Knuckles: {Player.State.GetCurrentStateID<Knuckles.StateID>()} ({stateIdNo})");
            break;

        case Player.PlayerType.Tails:
            Console.WriteLine($"[State ID] Tails: {Player.State.GetCurrentStateID<Tails.StateID>()} ({stateIdNo})");
            break;
    }
}